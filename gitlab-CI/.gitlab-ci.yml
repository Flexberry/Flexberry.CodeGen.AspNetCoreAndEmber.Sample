
stages:
    - build-front
    - build-back
    - docker-build
cache:
  paths:
    - node_modules/
    - bower_components/
# variables: 
#   tag: 'test'
#   iname: 'dh.ics.perm.ru/test/my-test-image'


front-job:
  variables:
    TRAVIS: '1'
  tags:
    - docker
  image: timbru31/node-chrome:18
  stage: build-front
  script:
    - echo "Сборка приложения..."
    - cd src/ember-app
    - useradd chrome
    - set -x
    - apt-get update
    - yarn global add ember-cli@3.1.4
    - yarn global add bower
    - yarn install --frozen-lockfile --allow-root
    - bower install
    - ember build -e test-dev
    - echo "Сборка успешно завершена." 
    - su chrome
    - echo "Тестирование начинается"
    - ember test -e test-dev --filter="ESLint" 
    - ember test -e test-dev --filter="Unit" 
    - echo "Тестирование успешно закончено"
  artifacts:
    paths:
     - sample-build/
  only:
    - merge_request
    - main

back-job:  
  stage: build-back
  tags: 
    - docker
  image: mcr.microsoft.com/dotnet/sdk:7.0
  script: 
      - cp -r src/SuperSimpleContactList/* .
      - ls -la
      - dotnet restore src/SuperSimpleContactList/ODataBackend/SuperSimpleContactList.ODataBackend.csproj
      - dotnet build src/SuperSimpleContactList/ODataBackend/SuperSimpleContactList.ODataBackend.csproj -c Release
      - dotnet publish src/SuperSimpleContactList/ODataBackend/SuperSimpleContactList.ODataBackend.csproj -c Release -o out -f netcoreapp3.1
  only:
    - merge_request
    - main

docker-build:
  variables: 
    image_tag: 'test'
    image_name: 'my-test-image'
    registry: 'dh.ics.perm.ru'
  tags:
    - docker
  image: docker:stable
  stage: docker-build
  script:    
    - docker info
    - cat /etc/docker/daemon.json
    - cd /src/Docker
    - sh create-image.cmd
    - sh push-image.cmd
  only:
    - merge_request
    - main

